"""
Case generation now uses a single-stage approach with GPT-4o-mini directly to JSON.
This is faster than the previous two-stage approach while maintaining quality.
"""
import json
import random
import time
from app.core.llm import chat
from app.core.schema import OsceCase
from random import choice
from app.core.name_utils import generate_name
from app.core.checklist import CHECKLIST_ITEMS
from app.core import CASE_GEN_MODEL

# Get the schema and then format it with json.dumps
_schema = OsceCase.model_json_schema()
_SCHEMA_STR = json.dumps(_schema, indent=2)

# Single-stage template - direct to JSON with gpt-4o-mini
DIRECT_JSON_TEMPLATE = """
You are an OSCE case writer. Create a medical case directly as JSON matching this schema:

SCHEMA:
{schema}

CASE PARAMETERS:
Language: {lang}
Category: {category}
Station focus: {station_type}
Difficulty (1-5): {difficulty}
{context_note}

PATIENT INFORMATION:
Name: {name}
Age: {age}
Gender: {gender}
Occupation: {occupation}
Chief complaint: {chief}

REQUIRED ELEMENTS:
1. Chief complaint (be specific)
2. History of present illness (detailed)
3. Past medical history
4. Medications and allergies
5. Social history
6. Family history
7. Physical examination findings
8. Lab results
9. Imaging results
10. Diagnosis (main and differentials)
11. Management plan
12. Patient personality (trait and coping style)
13. Patient backstory (80-100 words on life situation)
14. Narrative (60-90 words, 3rd person, emotive)
15. Candidate instructions

OUTPUT RULES:
1. Follow the schema exactly
2. Output ONLY JSON with no explanations or markdown
3. answer_key.main_diagnosis must be ONE line
4. Never leave any list empty; if truly N/A, write ["None"]
5. Candidate instructions must start with "Time allowed:" and end with "Good luck."
6. Personality trait must be one of: chatty, terse, irritable, anxious, optimistic, reserved, humorous, skeptical, dramatic
7. Coping style must be one of: stoical, denial, humor, anger, bargaining, research-focused, spiritual, avoidance
"""

def generate_case(
    lang:str="en",
    chief_override:str|None=None,
    settings:dict=None
) -> OsceCase:
    """Create a fresh OSCE case using a single-stage approach."""
    if settings.get("fully_random", False):
        # Use completely random parameters
        category = random.choice(["Family Medicine", "Pediatrics", "Surgery", "Emergency"])
        difficulty = random.randint(1, 5)
        station_type = random.choice(["Full OSCE", "History only", "Exam only"])
        age = random.randint(18, 90)
        gender = random.choice(["Male", "Female", "Other"])
        occupation = random.choice([
            "Teacher", "Nurse", "Engineer", "Student", "Retired", 
            "Office worker", "Construction worker", "Chef", "Driver"
        ])
        chief = None  # Will be generated by the model
    else:
        # Use settings provided by the user
        category = settings.get("category", "Family Medicine")
        difficulty = settings.get("difficulty", 3)
        station_type = settings.get("station_type", "Full OSCE")
        age = settings.get("age", 45)
        gender = settings.get("gender", "Male")
        occupation = settings.get("occupation", "Teacher")
        chief = chief_override
        
        # Check if language is in settings and override if present
        if "language" in settings:
            lang = settings["language"]
    
    # Generate a name that's appropriate for the language/culture
    name = generate_name(gender, lang)
    
    # Add more specific context for Arabic cases
    context_note = ""
    if lang == "ar":
        context_note = """
IMPORTANT CULTURAL NOTES:
- This case should be set in a Gulf country (UAE, Saudi Arabia, Qatar, etc.)
- Include cultural context appropriate to the region
- Consider local health issues and practices
- Names, locations, and social contexts should reflect Gulf culture
- Include at least one Arabic term with translation where appropriate

IMPORTANT SCHEMA REQUIREMENTS:
- You MUST include the keyHistoryQuestions and keyExamManeuvers fields as arrays of strings
- These fields are REQUIRED and cannot be omitted
- If truly not applicable, include ["None"] but NEVER leave them empty or omit them
"""
    
    # Get chief complaint
    chief_complaint = chief or "Generate a realistic chief complaint appropriate for this case"
    
    # SINGLE STAGE: Generate JSON directly with gpt-4o-mini
    print(f"DEBUG: Starting case generation with direct JSON approach")
    start_time = time.time()
    
    try:
        # Generate JSON directly
        raw = chat(
            [{"role":"system","content": DIRECT_JSON_TEMPLATE.format(
                schema=_SCHEMA_STR,
                lang=lang,
                category=category,
                station_type=station_type,
                difficulty=difficulty,
                context_note=context_note,
                name=name,
                age=age,
                gender=gender,
                occupation=occupation,
                chief=chief_complaint
            )}],
            model=CASE_GEN_MODEL,
            json_mode=True,
            temperature=0.5,  # Slightly higher temperature for creativity
            max_tokens=2000,
            stream=False
        )
        
        gen_time = time.time() - start_time
        print(f"DEBUG: Case generated in {gen_time:.2f} seconds")
        
        # Parse the JSON response first
        case_data = json.loads(raw)
        
        # Ensure required fields exist
        if 'keyHistoryQuestions' not in case_data:
            case_data['keyHistoryQuestions'] = ["Take a detailed history of the presenting complaint"]
        
        if 'keyExamManeuvers' not in case_data:
            case_data['keyExamManeuvers'] = ["Perform a relevant physical examination"]
        
        # Convert back to JSON
        validated_json = json.dumps(case_data)
        
        # Now validate
        obj = OsceCase.model_validate_json(validated_json)
        
        # Make sure the language is set in the case object
        obj.lang = lang
        return obj
    except Exception as e:
        print(f"First attempt failed: {str(e)}")
        
        # Second attempt with lower temperature
        print(f"DEBUG: Retrying with lower temperature")
        raw2 = chat(
            [{"role":"system","content": DIRECT_JSON_TEMPLATE.format(
                schema=_SCHEMA_STR,
                lang=lang,
                category=category,
                station_type=station_type,
                difficulty=difficulty,
                context_note=context_note,
                name=name,
                age=age,
                gender=gender,
                occupation=occupation,
                chief=chief_complaint
            )}],
            model=CASE_GEN_MODEL,
            json_mode=True,
            temperature=0.2, 
            max_tokens=2000,
            stream=False
        )
        
        # Parse the JSON response
        case_data = json.loads(raw2)
        
        # Ensure required fields exist
        if 'keyHistoryQuestions' not in case_data:
            case_data['keyHistoryQuestions'] = ["Take a detailed history of the presenting complaint"]
        
        if 'keyExamManeuvers' not in case_data:
            case_data['keyExamManeuvers'] = ["Perform a relevant physical examination"]
        
        # Convert back to JSON
        validated_json = json.dumps(case_data)
        
        # Now validate
        obj = OsceCase.model_validate_json(validated_json)
        
        # Make sure the language is set in the case object
        obj.lang = lang
        return obj 